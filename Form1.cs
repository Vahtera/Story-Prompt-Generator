/*
 * Story Prompt Generator
 * by Anna Vahtera 2025
 * 
 * Displays for images selected randomly from a list of included images.
 * 
 * Version history:
 * Version 0.1: Initial version
 * Version 0.2: Added "rolling" animation when randomizing results.
 * Version 0.2.1: Disabled roll button while animations are running to prevent double.images.
 * Version 0.3: Added disposing of images and fixed memory leak by initiating main images list only once.
 * Revision 0.3: Added versioning from GitHub commits. 
 * Revision 0.4: Added animation to Shuffle.
 * Revision 0.5: Changed Shuffle animation into a much smoother and better one. 
 * 
 */

using System;
using System.Threading.Tasks;
using AutoGenerated;

namespace Story_Prompt_Generator
{
    public partial class Form1 : Form
    {
        List<Image> images = new List<Image>();
        List<Image> imgList = new List<Image>();
        string[] REVISION = { "0.5", $"{CommitInfo.CommitCount}" };
        string VERSION => String.Format("Revision {0} Version {1}", REVISION);

        public Form1()
        {
            InitializeComponent();
            InitImages();
            FormBorderStyle = FormBorderStyle.FixedSingle;
            MaximizeBox = false;
            MinimizeBox = false;
        }

        private void btnQuit_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }
        private void InitImages()
        {
            imgList.Clear();
            imgList.Add(Properties.Resources._001);
            imgList.Add(Properties.Resources._002);
            imgList.Add(Properties.Resources._003);
            imgList.Add(Properties.Resources._004);
            imgList.Add(Properties.Resources._005);
            imgList.Add(Properties.Resources._006);
            imgList.Add(Properties.Resources._007);
            imgList.Add(Properties.Resources._008);
            imgList.Add(Properties.Resources._009);
            imgList.Add(Properties.Resources._010);
            imgList.Add(Properties.Resources._011);
            imgList.Add(Properties.Resources._012);
            imgList.Add(Properties.Resources._013);
            imgList.Add(Properties.Resources._014);
            imgList.Add(Properties.Resources._015);
            imgList.Add(Properties.Resources._016);
            imgList.Add(Properties.Resources._017);
            imgList.Add(Properties.Resources._018);
            imgList.Add(Properties.Resources._019);
            imgList.Add(Properties.Resources._020);

        }
        private void ResetImages()
        {
            images.Clear();
            images = images.Concat(imgList).ToList();

            picOne.BackgroundImage = null;
            picTwo.BackgroundImage = null;
            picThree.BackgroundImage = null;
            picFour.BackgroundImage = null;

        }
        private async Task GetRandomImage(PictureBox pBox)
        {
            if (chkAnimate.Checked) { await RollImages(pBox); }

            Random r = new Random();
            Image img = images[r.Next(images.Count)];
            images.Remove(img);
            pBox.BackgroundImage = img;
        }
        private async Task RollImages(PictureBox pBox)
        {
            for (int i = 0; i < images.Count; i++)
            {
                pBox.Image = null;
                pBox.Image = images[i];
                await Task.Delay(10);
            }
            pBox.Image = null;
        }
        private async void FlipFlip()
        {
            btnShuffle.Enabled = false;
            List<Image> pics = new List<Image>();
            Random random = new Random();

            if (picOne.BackgroundImage != null)
                pics.Add(picOne.BackgroundImage);
            if (picTwo.BackgroundImage != null)
                pics.Add(picTwo.BackgroundImage);
            if (picThree.BackgroundImage != null)
                pics.Add(picThree.BackgroundImage);
            if (picFour.BackgroundImage != null)
                pics.Add(picFour.BackgroundImage);

            var shuffledimages = pics.OrderBy(_ => random.Next()).ToList();

            if (shuffledimages.Count >= 4)
            {

                if (chkAnimate.Checked)
                {
                    await Task.WhenAll(
                        ZoomInOut(picOne, shuffledimages[0]),
                        ZoomInOut(picTwo, shuffledimages[1]),
                        ZoomInOut(picThree, shuffledimages[2]),
                        ZoomInOut(picFour, shuffledimages[3])
                    );
                }
                else
                {
                    picOne.BackgroundImage = null;
                    picTwo.BackgroundImage = null;
                    picThree.BackgroundImage = null;
                    picFour.BackgroundImage = null;

                    picOne.BackgroundImage = shuffledimages[0];
                    picTwo.BackgroundImage = shuffledimages[1];
                    picThree.BackgroundImage = shuffledimages[2];
                    picFour.BackgroundImage = shuffledimages[3];
                }

                shuffledimages.Clear();
                pics.Clear();
                btnShuffle.Enabled = true;
            }

        }
        private async void SetImages()
        {
            btnRoll.Enabled = false;
            btnRoll.BackgroundImage?.Dispose();
            btnRoll.BackgroundImage = Properties.Resources.btnRandomize_disabled;

            ResetImages();
            await Task.WhenAll(
                GetRandomImage(picOne),
                GetRandomImage(picTwo),
                GetRandomImage(picThree),
                GetRandomImage(picFour)
            );
            btnRoll.Enabled = true;
            btnRoll.BackgroundImage?.Dispose();
            btnRoll.BackgroundImage = Properties.Resources.btnRandomize_up;
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            SetImages();
            lblVersion.Text = VERSION;
            Size = new Size(854, 319);
            
            picOne.Left = lblPicOne.Left + 1;
            picOne.Top = lblPicOne.Top + 1;
            picTwo.Left = lblPicTwo.Left + 1;
            picTwo.Top = lblPicTwo.Top +1;
            picThree.Left = lblPicThree.Left + 1;
            picThree.Top = lblPicThree.Top + 1;
            picFour.Left = lblPicFour.Left + 1;
            picFour.Top = lblPicFour.Top + 1;
            picOne.Size = new Size(198, 198);
            picTwo.Size = new Size(198, 198);
            picThree.Size = new Size(198, 198);
            picFour.Size = new Size(198, 198);

        }

        private void btnRoll_Click(object sender, EventArgs e)
        {
            SetImages();
        }
        private void btnRoll_MouseDown(object sender, MouseEventArgs e)
        {
            btnRoll.BackgroundImage?.Dispose();
            btnRoll.BackgroundImage = Properties.Resources.btnRandomize_down;
        }        
        private void DisposeImage(Image image)
        {
            try
            {
                image?.Dispose();
            }
            catch (ObjectDisposedException)
            {
                // Log or handle the exception if needed
            }
        }
        private async Task ZoomInOut(PictureBox pic, Image img)
        {
            int zoomFactor = 16;
            int speed = 10;
            int origWidth = pic.Width;
            int origHeight = pic.Height;
            int origLeft = pic.Left;
            int origTop = pic.Top;

            

            // Zoom out
            for (int i = 0; i < zoomFactor; i++)
            {
                pic.Width -= speed;
                pic.Height -= speed;
                pic.Left += speed / 2;
                pic.Top += speed / 2;
                await Task.Delay(10);
            }

            pic.BackgroundImage = img;

            // Zoom in
            for (int i = 0; i < zoomFactor; i++)
            {
                pic.Width += speed;
                pic.Height += speed;
                pic.Left -= speed / 2;
                pic.Top -= speed / 2;
                await Task.Delay(10);
            }

            // Restore original size and position
            pic.Width = origWidth;
            pic.Height = origHeight;
            pic.Left = origLeft;
            pic.Top = origTop;
        }

        private void btnShuffle_Click(object sender, EventArgs e)
        {
            FlipFlip();
        }
    }
}
